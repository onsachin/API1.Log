#trigger: 
 #- dev

trigger:
  branches:
    include:
      - main


pool:
  name: app-log-pool
  timeoutInMinutes: 15

# variables:
#   name : projects
#   value: '**/*.csproj'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET Core sdk 9.x'
  inputs:
    version: 9.x

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '**/*.csproj'
    #projects: '$(projects)'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: '**/*.csproj'
    #projects: '$(projects)'
    arguments: '--configuration $(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    projects: '**/*.csproj'
    #projects: '$(Parameters.TestProjects)'
    arguments: '--configuration $(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
    zipAfterPublish: True

#Commented for linux deployment/ Uncomment for windows
# - task: PublishBuildArtifacts@1
#   displayName: 'Publish Artifact'
#   inputs:
#     PathtoPublish: '$(build.artifactstagingdirectory)'
#   condition: succeededOrFailed()

#Below line is for deploying into linux VM

- task : CopyFiles@2
  displayName : CopyScripts
  inputs:
     #SourceFolder: 'Connect.Web/Deploy'
     SourceFolder: '$(build.sourcesdirectory)/Deploy'
     Contents: '**'
     TargetFolder: '$(build.artifactstagingdirectory)/Deploy'
     CleanTargetFolder: true
- task : PublishBuildArtifacts@1
  displayName: 'Publish Artifacts'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
    ArtifactName: 'drop'
    publishLocation: Container

# - task: Bash@3
#   displayName: 'Start Deploment Agent'
#   inputs:
#     targetType: 'inline'
#     script: |
#       # Write your commands here  
#       echo -e "Sachin@123\n" | sudo -S bash /azagent/run.sh



#-------------------------------Deployments------------------
jobs :
- deployment: VMDeploy
  displayName: WebAPIOne
  environment:
    name: 'LinuxVMEnv'
    resourceType: VirtualMachine
    tags: 'WebApiOne'
  strategy:
      rolling:
        maxParallel: 2  #for percentages, mention as x%
        preDeploy:
          steps:
          - download: current
            artifact: drop
          - script: echo initialize, cleanup, backup, install certs
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                # Modify deployment script based on the app type
                #echo "Starting deployment script run"
                #sudo java -jar '$(Pipeline.Workspace)/drop/**/target/*.jar'
                  echo -e "Sachin@123@123\n" | sudo -S apt install unzip
                #echo -e "Sachin@123@123\n" | sudo -S mkdir /var/www/DemoApi1
                  echo -e "Sachin@123@123\n" | sudo -S unzip -o $(ArtifactDirectory)/DemoApi1.Log.zip -d /var/www/DemoApi1
                #echo -e "Sachin@123@123\n" | sudo -S systemctl revert DemoApi1.service
                #echo -e "Sachin@123@123\n" | sudo -S bash $(ArtifactDirectory)/Deploy/app1log.sh DemoApi1
                #echo -e "Sachin@123@123\n" | sudo -S  systemctl restart DemoApi1.service